PROTOKOLL

********************************
         DEADLINES                      
********************************
19.06. Prototyp l�uft
26.06. Fehler beseitigt
06.07. Dokumentation ist fertig
08.07. Pr�sentation ist gepr�ft und fertig



********************************
        UNKLARHEITEN
********************************
		
	KLASSE ElementMapper:
		Zeile 76: 			a.setModifyDateID(rs.getTimestamp ("modify_date"));
		in
							a.setLastUpdateID(rs.getTimestamp ("last_update"));
		abge�ndert. 
		Falls diese �nderung f�r die DB wichtig ist, BITTE beachten!!!
		
  	MAPPER KLASSEN:
  		insert-Methoden nachtragen!!!
	
	KLASSE Product:
		sollen wir eine extra Beschreibung f�r Endprodukte mitreinnehmen? --> neues Attribut
		UPDATE 30.05.: Umgesetzt!!! 
		
	KLASSE AdministrationCommonImpl:
		Thomas, Kenny und Joey, bitte beachten!!!
		Habs abge�ndert: 
			*folgendes gel�scht
			[
				this.userMapper = UserMapper.getUserMapper();
				this.elementMapper = ElementMapper.getElementMapper();
				this.moduleMapper = ModuleMapper.getModuleMapper();
				this.productMapper = ProductMapper.getProductMapper();
				this.partlistMapper = PartlistMapper.getPartlistMapper();
			]
			
				/**
			  	 * <p>
				 * Ein <code>RemoteServiceServlet</code> wird unter GWT mittels
				 * <code>GWT.create(Klassenname.class)</code> Client-seitig erzeugt. Hierzu
				 * ist ein solcher No-Argument-Konstruktor anzulegen. Ein Aufruf eines anderen
				 * Konstruktors ist durch die Client-seitige Instantiierung durch
				 * <code>GWT.create(Klassenname.class)</code> nach derzeitigem Stand nicht
				 * m�glich.
				 * </p>
				 * <p>
				 * Es bietet sich also an, eine separate Instanzenmethode zu erstellen, die
				 * Client-seitig direkt nach <code>GWT.create(Klassenname.class)</code>
				 * aufgerufen wird, um eine Initialisierung der Instanz vorzunehmen.
				 * </p>
				 * 
				 * @see #init()
				 */
				 
				  public BankAdministrationImpl() throws IllegalArgumentException {
				  /*
				   * Eine weitergehende Funktion muss der No-Argument-Constructor nicht haben.
				   * Er muss einfach vorhanden sein.
				   */
		  			}
		  			
		  			
		  Methode auskommentiert
		  --> public String calculateMaterial(Partlist partlist)
			throws IllegalArgumentException {
		  			
		 UNKLARHEIT - Was ist nun mit dem User? Wie gesagt ich würde ihn komplett raus nehmen, muss es dann
		 			  aber auch für die Applikationslogig sein, bzw im Package .server ist ja noch der Mapper des Users.
		 			  (Sam)
		  			- habe diese Methode private static final Logger logger = ServerSettings.getLogger(); noch mit dazu geschrieben,
		  			  Frage, wenn der User raus fällt, benötigt man diese dann noch, da Auslesen des applikationsweiten (Server-seitig!) zentralen Loggers.
		